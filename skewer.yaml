title: Skupper HTTP2 services using TLS
subtitle: A minimal HTTP2 application deployed across Kubernetes clusters using Skupper and encrypted using TLS
github_actions_url: https://github.com/skupperproject/skupper-example-http2-tls/actions/workflows/main.yaml
overview: |
  This example is a simple multi-service HTTP2 application that can
  be deployed across multiple Kubernetes clusters using Skupper.

  It contains two services:

  * A backend HTTP2 webserver.

  * A deployment that uses `curl` to call the webserver.

  With Skupper, you can place the backend in one cluster and the
  frontend in another and maintain connectivity between the two
  services without exposing the backend to the public internet.
  All the traffic is encrypted using TLS.

prerequisites: !string prerequisites
sites:
  west:
    kubeconfig: ~/.kube/config-west
    namespace: west
  east:
    kubeconfig: ~/.kube/config-east
    namespace: east
steps:
  - standard: configure_separate_console_sessions
  - standard: access_your_clusters
  - standard: set_up_your_namespaces
  - title: Install Skupper in your namespaces
    preamble: !string install_skupper_in_your_namespaces_preamble
    commands:
      west:
        - run: skupper init
          await: [deployment/skupper-service-controller, deployment/skupper-router]
      east:
        - run: skupper init --ingress none
          await: [deployment/skupper-service-controller, deployment/skupper-router]
  - standard: check_the_status_of_your_namespaces
  - title: Link your namespaces
    preamble: !string link_your_namespaces_preamble
    commands:
      west:
        - run: skupper token create ~/west.token
      east:
        - run: skupper link create ~/west.token
        - run: skupper link status --wait 30
    postamble: !string link_your_namespaces_postamble
  - title: Deploy the frontend and backend services
    preamble: |
      Use YAML files to deploy the frontend service
      in `west` and the backend service in `east`.
    commands:
      east:
        - run: kubectl apply -f backend/index-html-config-map.yaml
        - run: kubectl apply -f backend/ngnixhttp2tls_nocerts.yaml
          await: [deployment/nghttp2tls]
      west:
        - run: kubectl apply -f frontend/kubernetes-curl-job.yaml
          await: [jobs/my-kubernetes-job]

  - title: Expose the backend service
    preamble: |
      We now have two namespaces linked to form a Skupper network, but
      no services are exposed on it.  Skupper uses the `skupper
      expose` command to select a service from one namespace for
      exposure on all the linked namespaces.

      Use `skupper expose` to expose the backend service to the
      frontend service with the `enable-tls` option.
    commands:
      east:
        - run: skupper expose deployment nghttp2tls --port 443 --protocol http2 --enable-tls
          sleep: 30
          output: |
            deployment nghttp2tls exposed as nghttp2tls

  - title: Modify the backend service to use the certs from the site.
    preamble: |
      The webserver requires the certs to provide TLS connections
    commands:
      east:
        - run: kubectl  apply -f backend/ngnixhttp2tls_withcerts.yaml
          output: |
            tbd
        - run: kubectl get services
          output: |
            NAME                   TYPE           CLUSTER-IP       EXTERNAL-IP      PORT(S)                           AGE
            tbd
  - title: Test the application
    preamble: |
      Check the output of the curl job.
    commands:
      west:
        - run: kubectl logs jobs/my-kubernetes-job
          output: |
            < HTTP/2 200 
            < server: nghttpd nghttp2/1.12.0
            < cache-control: max-age=3600
            < date: Tue, 17 May 2022 11:54:34 GMT
            < content-length: 71
            < last-modified: Tue, 17 May 2022 11:53:01 GMT
            < 
            { [5 bytes data]
            100    71  100    71    0     0   3177      0 --:--:-- --:--:-- --:--:--  3227
            * Connection #0 to host nghttp2tls left intact
    postamble: |
      The status 200 indicates a successful run.
summary: |
  This example locates the frontend and backend services in different
  namespaces, on different clusters.  Ordinarily, this means that they
  have no way to communicate unless they are exposed to the public
  internet.

  Introducing Skupper into each namespace allows us to create a virtual
  application network that can connect services in different clusters.
  Any service exposed on the application network is represented as a
  local service in all of the linked namespaces.

  The backend service is located in `east`, but the frontend service
  in `west` can "see" it as if it were local.  When the frontend
  sends a request to the backend, Skupper forwards the request to the
  namespace where the backend is running and routes the response back to
  the frontend.

  This example shows how the HTTP2 service can use TLS to ensure all traffic is encrypted.